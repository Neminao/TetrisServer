{"version":3,"sources":["Events.js","TetrisHelper.js","Factories.js","BaseBuildingSquare.tsx","UniversalShape.tsx","GameRequest.tsx","ClientManager.ts","GameSetupScreen.tsx","Chat.tsx","UserContainer.tsx","Canvas.tsx","MiniCanvas.tsx","Popup.tsx","WinnerPopup.tsx","AutoComplete.tsx","UniversalShapeContext.tsx","Highscore.tsx","UserInfo.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","USER_CONNECTED","USER_DISCONNECTED","GAME_UPDATE","VERIFY_USER","LOGOUT","USER_READY","GAME_START","GAME_INIT","READY","USER_IN_GAME","GAME_REQUEST","REQUEST_DENIED","RESET","ADD_SHAPES","SEND_TO_SPECTATOR","SPECTATE","SPECTATE_INFO","DISPLAY_GAMES","INITIALIZE_GAME","GAME_OVER","GAME_SETUP","HIGHSCORE","WINNER","REGISTER","LIST_UPDATE","MULTIPLAYER","CHAT","createEmptyMatrix","col","row","arr","sub","j","push","status","color","i","x","isGameOver","shape","matrix","areBlocksFreeToMoveDown","isRowComplete","numArr","_loop","counter","forEach","subEl","createGrid","ctx","size","scale","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","uuidv4","require","shapeCoordinates","0","y","1","2","3","4","5","6","7","8","9","colors","createUser","_ref","arguments","length","undefined","_ref$name","name","_ref$socketID","socketID","_ref$inGame","inGame","_ref$isReady","isReady","_ref$score","score","_ref$gameMode","gameMode","_ref$gameName","gameName","id","createGameData","_ref2$matrix","generateShapes","max","difficulty","index","Math","floor","random","array","coords","BaseBuildingSquare","left","top","Object","classCallCheck","this","fillStyle","fillRect","rect","abs","pom","UniversalShape","columns","rows","_this","coordiantesArr","blocksArr","currentPosition","setBlocks","blocks","fillArr","move","_this2","map","elem","_this3","_this4","moveDown","areBlockOutOfBoundsRight","moveRight","areBlockOutOfBoundsLeft","moveLeft","moveBack","_this5","updateCanvas","isBlockFreeToMoveLeft","isBlockFreeToMoveRight","isBlockFreeToMoveDown","blockStates","moveAdjustment","_this6","isBlockFreeToRotate","_this7","_this8","GameRequest","accept","event","target","value","props","react_default","a","createElement","className","onClick","React","Component","CM","socket","io","initSocket","on","blockSize","shapes","generatedShapes","initChat","addMsg","line","initMainTetrisContext","setGeneratedShapes","setReciever","addShapes","showAccepted","setRecievers","removeSpectator","opponentGameOver","removeReciever","setShapesCoords","setPlayerReady","setDifficulty","displayWinner","obj","tf","user","winnerData","newShapes","recievers","updateGame","updateSecondCanvas","spectatingGames","updateSpectatingCanvas","initMenu","setHighscore","result","initUserContainer","displayUsers","setSender","setRequest","startGame","setSide","addSpectator","updateAvailableGames","setInitBtn","updateGameSetupScreen","emitGameSetup","reset","removeInvitedPlayer","removeGameMaster","allUsers","sender","_ref2","start","spectator","gamesInProgress","initRegister","setError","setDisplay","success","emitGameUpdate","reciever","totalScore","acceleration","emit","emitUserInGame","username","emitLogout","emitUserConnected","emitUserReady","reqSender","emitGameRequest","emitGameStart","to","emitVerifyUser","nickname","password","setUser","emitReset","keepGameMode","emitAddShapes","emitSpectate","game","emitSpectatorData","emitInitializeGame","emitRequestDenied","emitGameOver","master","emitRegister","emitListUpdate","emitMultiplayer","emitMsg","msg","GameSetupScreen","createStringFromArray","str","_this$props","initializeGame","showInitBtn","invitedPlayers","isPlayer","gameMaster","Chat","possibleConstructorReturn","getPrototypeOf","call","sendMsg","preventDefault","message","state","setState","chatMsgs","document","getElementById","scrollTop","scrollHeight","handleChange","render","_this$state","readOnly","onSubmit","type","onChange","placeholder","autoComplete","UserContainer","finalizeStart","showStartBtn","reqSent","showReq","showSide","showRequest","isSpectator","changeSpectatingStatus","isGameMaster","_this$props2","indexOf","splice","sendInvite","_this$props3","players","selectedPlayers","invited","index1","index2","innerHTML","disabled","style","backgroundColor","users","values","u","key","games","spectate","_this$props4","setTimeout","accepted","_this$props5","isPlayerReady","running","initGame","denied","displayRecievers","displayGames","src_GameSetupScreen","src_Chat","src_GameRequest","_this$props6","_this$state2","Canvas","updateWindowDimensions","canvasBack","canvasFront","fixed","c2","current","width","height","getContext","c1","window","addEventListener","removeEventListener","ref","MiniCanvas","bind","assertThisInitialized","canvasSide","c3","rowScore","style2","Popup","close","resetPopup","WinnerPopup","winner","AutoComplete","createRef","componentDidMount","autoMove","tempShape","coordinatesArr","innerC","c","numberOfFilledFields","newMatrix","maxNew","element","clearRow","mat","unshift","speed","gen","concat","bestShape","findBestPosition","rotation","canvas","canvas2","ctx2","setInterval","intervalId","rotate","clearRect","areBlocksFreeToMoveLeft","areBlocksFreeToMoveRight","addShapeToMatrix","fillCanvas","clearInterval","temp","draw","copyBlocks","topNegative","leftNegative","block","rowNum","copyMatrix","moved","rowCountSum","rowCountTemp","k","areBlocksFreeToMoveDownNumber","isShapeAVerticalLine","removeShapeFromMatrix","getMatrixHeight","getColumnHeight","columnIndex","doesShapeNeedOneBlock","field","round","changeSpeed","moveCounter","src_Canvas","UniversalShapeContext","canvasBack2","canvasBack3","canvasBack4","addEventListeners","handleKeyDown","onKeyUp","nextShape","src_WinnerPopup","hideWinner","shapesCoords","recs","getCanvasBasedOnRecieverIndex","gameOver","newCoords","currentShapes","specs","spectators","reqAccepted","src_Popup","d","_this$state3","logout","e","currentShape","defaultShape","allBlocks","counterId","delay","baseDelay","scorePlayer2","totalScorePlayer2","generatedShapesIndex","_this$state4","acc","userIndex","shape1","totalScorePlayer3","scorePlayer3","totalScorePlayer4","scorePlayer4","defineNewProperties","setScoreBasedOnRecieverIndex","_this$state5","ctx1","keyCode","handleRotate","updateStateOfTheGame","run","_this$state6","_this$state7","next","deepCopyShape","sidectx","fitToSide","inter","moveShape","font","textAlign","fillText","strokeText","_this$state8","stopGame","total","rowsToClear","handleMove","shapehelp","areBlockOutOfRotateBoundsLeft","areBlockOutOfRotateBoundsRight","areBlocksFreeToRotate","rec","specCanvases","windowHeight","innerHeight","windowWidth","innerWidth","generateSpecCanvases","_this$state9","canvases","info","generateCanvasData","data","src_MiniCanvas","_this$state10","_this$state11","singlePlayer","spect","mode","copy","attr","hasOwnProperty","_this$state12","src_UserContainer","src_AutoComplete","Highscore","scores","title","UserInfo","show","method","action","Menu","buttons","getElementsByClassName","setUserDetails","isUser","animate","TimelineMax","fromTo","opacity","display","highscore","highscoreEasy","src_UniversalShapeContext","src_Highscore","src_UserInfo","App","src_Menu","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07154356.chunk.js","sourcesContent":["module.exports = {\r\n\tUSER_CONNECTED: \"USER_CONNECTED\",\r\n\tUSER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n\tGAME_UPDATE: \"GAME_UPDATE\",\r\n\tVERIFY_USER: \"VERIFY_USER\",\r\n\tLOGOUT: \"LOGOUT\",\r\n\tUSER_READY: \"USER_READY\",\r\n\tGAME_START: \"GAME_START\",\r\n\tGAME_INIT: \"GAME_INIT\",\r\n\tREADY: \"READY\",\r\n\tUSER_IN_GAME: \"USER_IN_GAME\",\r\n\tGAME_REQUEST: \"GAME_REQUEST\",\r\n\tREQUEST_DENIED: \"REQUEST_DENIED\",\r\n\tRESET: \"RESET\",\r\n\tADD_SHAPES: \"ADD_SHAPES\",\r\n\tSEND_TO_SPECTATOR: \"SEND_TO_SPECTATOR\",\r\n\tSPECTATE: \"SPECTATE\",\r\n\tSPECTATE_INFO: \"SPECTATE_INFO\",\r\n\tDISPLAY_GAMES: \"DISPLAY_GAMES\",\r\n\tINITIALIZE_GAME: \"INITIALIZE_GAME\",\r\n\tGAME_OVER: \"GAME_OVER\",\r\n\tGAME_SETUP: \"GAME_SETUP\",\r\n\tHIGHSCORE: \"HIGHSCORE\",\r\n\tWINNER: \"WINNER\",\r\n\tREGISTER: \"REGISTER\",\r\n\tLIST_UPDATE: \"LIST_UPDATE\",\r\n\tMULTIPLAYER: \"MULTIPLAYER\",\r\n\tCHAT: \"CHAT\"\r\n}","\r\n\r\nfunction createEmptyMatrix (col, row) {\r\n    let arr = [];\r\n    function sub() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: false, color: 'white' });\r\n        }\r\n        return sub;\r\n    }\r\n    for (let i = 0; i < row; i++) {\r\n        arr.push(sub());\r\n    }\r\n    function x() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: true, color: 'black' });\r\n        }\r\n        return sub;\r\n    }\r\n    arr.push(x())\r\n    return arr;\r\n}\r\n\r\n function isRowComplete (col, row, arr) {\r\n    let numArr = []\r\n    for (let i = 0; i < row; i++) {\r\n        let counter = 0;\r\n        arr[i].forEach((subEl) => {\r\n            if (subEl.status) counter++;\r\n        })\r\n        if (counter === col) {\r\n            numArr.push(i);\r\n        }\r\n    }\r\n    return numArr;\r\n}\r\n\r\n function isGameOver (shape, matrix) {\r\n    return !shape.areBlocksFreeToMoveDown(matrix)\r\n}\r\n\r\n function createGrid (ctx, col, row, size, scale) {\r\n    if (scale) size = size / 2;\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#ccc';\r\n    for (let i = 1; i < row; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, i * size);\r\n        ctx.lineTo(col * size, i * size);\r\n        ctx.stroke();\r\n    }\r\n    for (let i = 1; i < col; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(i * size, 0);\r\n        ctx.lineTo(i * size, row * size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateEmptyMatrix,\r\n\tisGameOver,\r\n    isRowComplete,\r\n    createGrid\r\n}","\r\nvar uuidv4 = require(\"uuid/v4\");\r\nvar shapeCoordinates = {\r\n    0: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]\r\n    ],\r\n    1: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: -1 }]\r\n    ],\r\n    2: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 0, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    3: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 2, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: -2 }, { x: 0, y: 1 }]\r\n    ],\r\n    4: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: 1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: 1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: -1 }]\r\n    ],\r\n    5: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: -1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: 1 }]\r\n    ],\r\n    6: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]\r\n    ],\r\n    7: [\r\n        [{ x: 0, y: 0 }]\r\n    ],\r\n    8: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    9: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }]\r\n    ],\r\n};\r\nvar colors = {\r\n    0: 'OrangeRed', \r\n    1: 'blue',\r\n    2: 'yellow',\r\n    3: 'orange',\r\n    4: 'GreenYellow',\r\n    5: 'Aqua',\r\n    6: 'DeepPink',\r\n    7: 'dodgerblue',\r\n    8: 'red',\r\n    9: 'green'\r\n\r\n}\r\nconst createUser = ({name = \"\", socketID = null, inGame = false, isReady = false, score = 0, gameMode = 0, gameName = ''} = {})=>(\r\n\t{\r\n\t\tid:uuidv4(),\r\n\t\tname,\r\n\t\tsocketID,\r\n\t\tinGame,\r\n        isReady, \r\n        score, \r\n        gameMode,\r\n        gameName\r\n\t}\r\n)\r\n\r\nconst createGameData = ({matrix = []} = {})=>(\r\n\t{\r\n\t\tmatrix\t\r\n\t}\r\n)\r\nfunction generateShapes (max, difficulty) { \r\n\tlet index = Math.floor(Math.random() * Math.floor(difficulty));\r\n\tlet array = [];\r\n\tfor(var i = 0 ;i<max;i++){\r\n\t\tindex = Math.floor(Math.random() * Math.floor(difficulty));\r\n\t\tarray.push({coords: shapeCoordinates[index], color: colors[index]});\r\n\t\t\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateUser,\r\n\tcreateGameData,\r\n\tgenerateShapes\r\n}\r\n\r\n","class BaseBuildingSquare {\r\n    left: number;\r\n    top: number;\r\n    color: string;\r\n    size: number\r\n    constructor(left: number, top: number, color: string, size: number) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.color = color;\r\n        this.size = size\r\n    }\r\n    setTop(top: number) {\r\n        this.top = top;\r\n    }\r\n    updateCanvas(ctx: any, color?: string) {\r\n        \r\n        ctx.fillStyle = this.color;\r\n        if(color) ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        ctx.fillRect(this.left, this.top, this.size, this.size);\r\n        ctx.rect(this.left, this.top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    draw(left: number, top: number, ctx: any, color: string) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.fillRect(left, top, this.size, this.size);\r\n        ctx.rect(left, top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    moveDown() {\r\n        this.top += this.size;\r\n    }\r\n    moveBack() {\r\n        this.top -= this.size;\r\n    }\r\n    moveLeft() {\r\n        this.left -= this.size;\r\n    }\r\n    moveRight() {\r\n        this.left += this.size;\r\n    }\r\n    isBlockFreeToMoveLeft(matrix: any) {\r\n        return !matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size - 1)].status;\r\n    }\r\n    isBlockFreeToMoveRight(matrix: any) {\r\n        let pom = false;\r\n        if(null != matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)])\r\n        if(!matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)].status) pom = true;\r\n        return pom;\r\n    }\r\n    isBlockFreeToMoveDown(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][this.left / this.size].status)\r\n    }\r\n    isBlockFreeToRotate(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size)].status)\r\n    }\r\n}\r\n\r\nexport default BaseBuildingSquare","import BaseBuildingSquare from \"./BaseBuildingSquare\";\r\n\r\nclass UniversalShape {\r\n    coordiantesArr: any[];\r\n    blocksArr: BaseBuildingSquare[];\r\n    top: number;\r\n    left: number;\r\n    columns: number;\r\n    rows: number;\r\n    size: number;\r\n    currentPosition: number;\r\n    color: string;\r\n    constructor(arr: any[], columns: number, rows: number, size: number, color: string) {\r\n        this.coordiantesArr = arr\r\n\r\n        this.top = 0;\r\n        this.left = 0;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.currentPosition = 0;\r\n        this.color = color;\r\n        this.blocksArr = this.fillArr(arr[0], size, columns);\r\n    }\r\n\r\n    setBlocks = (blocks: any[]) => {\r\n        this.blocksArr = blocks\r\n    }\r\n\r\n    fitToSide(move: number) {\r\n        this.blocksArr = this.blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare((elem.left - move * this.size), elem.top , this.color, this.size)\r\n        });\r\n    }\r\n    defineNewProperties(blocksArr: any[], scale: number, size: number) {\r\n        this.blocksArr = blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare(Math.floor(elem.left / scale * size), Math.floor(elem.top / scale * size), 'red', this.size)\r\n        });\r\n    }\r\n    fillArr(arr: any, size: number, columns: number): BaseBuildingSquare[] {\r\n        let array: BaseBuildingSquare[] = [];\r\n        arr.forEach((elem: any) => {\r\n            array.push(new BaseBuildingSquare((elem.x + Math.floor(columns / 2) - 1) * size, elem.y * size, this.color, size))\r\n        })\r\n        return array;\r\n    }\r\n    moveDown() {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveDown();\r\n        })\r\n        this.top += 1;\r\n    }\r\n    moveRight() {\r\n        if (this.areBlockOutOfBoundsRight()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveRight();\r\n            })\r\n            this.left += 1;\r\n        }\r\n    }\r\n    moveLeft() {\r\n        if (this.areBlockOutOfBoundsLeft()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveLeft();\r\n            })\r\n            this.left -= 1;\r\n        }\r\n    }\r\n    moveBack(): void {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveBack();\r\n        })\r\n    }\r\n    updateCanvas(ctx: any) {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.updateCanvas(ctx, this.color);\r\n        })\r\n    }\r\n    areBlocksFreeToMoveLeft(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveLeft(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveRight(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveRight(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveDown(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n\r\n    areBlocksFreeToMoveDownNumber(matrix: any) {\r\n        let pom = 0;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom += 1;\r\n            }\r\n        })\r\n        if(pom>0){\r\n            if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom == 4;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                \r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom *= 2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[1].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[1].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[1].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[1].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[1].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[1].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n        }\r\n        return pom;\r\n    }\r\n\r\n    rotate() {\r\n        let i = this.currentPosition;\r\n        let blockStates = this.coordiantesArr\r\n        if (i < blockStates.length - 1) {\r\n            i += 1;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n        else {\r\n            i = 0;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n\r\n    }\r\n    moveAdjustment(blocksArr: any) {\r\n        let arr: any[] = [];\r\n        blocksArr.forEach((elem: any) => {\r\n            arr.push({ x: elem.x + this.left, y: elem.y + this.top });\r\n        })\r\n        return arr;\r\n    }\r\n    areBlocksFreeToRotate(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToRotate(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left <= 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left < 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left >= (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left > (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n}\r\n\r\nexport default UniversalShape","import React from 'react';\r\n\r\nclass GameRequest extends React.Component<{ name: string, accept: any }, {}> {\r\n    accept = (event: any) => {\r\n        if(event.target.value == 1)\r\n        this.props.accept(true);\r\n        else if(event.target.value == 0)\r\n        this.props.accept(false);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'request'}>\r\n            <p>\r\n            {this.props.name} wants to play a game.\r\n            </p>\r\n            <div>\r\n                <button onClick={this.accept} value={1}>Accept</button>\r\n                <button onClick={this.accept} value={0}>Decline</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameRequest","import io from 'socket.io-client';\r\nimport {CHAT, LIST_UPDATE, REGISTER, WINNER, HIGHSCORE, GAME_OVER, INITIALIZE_GAME, USER_CONNECTED, USER_DISCONNECTED, GAME_UPDATE, GAME_INIT, USER_READY, GAME_REQUEST, GAME_START, VERIFY_USER, LOGOUT, USER_IN_GAME, REQUEST_DENIED, RESET, ADD_SHAPES, SPECTATE, SPECTATE_INFO, SEND_TO_SPECTATOR, DISPLAY_GAMES, GAME_SETUP, MULTIPLAYER } from './Events'\r\nimport UniversalShape from './UniversalShape';\r\n\r\nconst socketUrl = \"http://localhost:3231\"; // change to local ip with same port for testing // port must match port defined in socket\r\n\r\nclass ClientManager {\r\n    socket = io(socketUrl);\r\n    initSocket = () => {\r\n\r\n        this.socket.on('connect', () => {\r\n        })\r\n        return this.socket;\r\n    }\r\n    generateShapes = (columns: number, rows: number, blockSize: number): any[] => {\r\n        let shapes: any[] = [];\r\n        this.socket.on(GAME_INIT, (shapes: any) => {\r\n            let generatedShapes = shapes.map((elem: any) => {\r\n                return new UniversalShape(elem.coords, columns, rows, blockSize, elem.color);\r\n            })\r\n\r\n            shapes = generatedShapes;\r\n        })\r\n        return shapes;\r\n    }\r\n\r\n    initChat = (addMsg: any) => {\r\n        this.socket.on(CHAT, (line: string)=>{\r\n            addMsg(line);\r\n        })\r\n    }\r\n\r\n    initMainTetrisContext = (setGeneratedShapes: any, setReciever: any, addShapes: any, showAccepted: any, setRecievers: any, removeSpectator: any, opponentGameOver: any, removeReciever: any, setShapesCoords: any, setPlayerReady: any, setDifficulty: any, displayWinner: any) => {\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf) {\r\n                setReciever(obj.user);\r\n                showAccepted(obj.user, true);\r\n            }\r\n        });\r\n\r\n        this.socket.on(WINNER, (winnerData: any) => {\r\n            displayWinner(winnerData);\r\n        })\r\n\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            removeReciever(obj.name);\r\n        })\r\n\r\n        this.socket.on(REQUEST_DENIED, (user: string) => {\r\n            showAccepted(user, false);\r\n        })\r\n\r\n        this.socket.on(RESET, (user: any) => {\r\n            removeSpectator(user);\r\n            removeReciever(user);\r\n        })\r\n\r\n        this.socket.on(ADD_SHAPES, (newShapes: any) => {\r\n            addShapes(newShapes);\r\n        });\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setGeneratedShapes(obj.generatedShapes);\r\n            setShapesCoords(obj.generatedShapes)\r\n            setRecievers(obj.recievers);\r\n            setDifficulty(obj.difficulty);\r\n            setPlayerReady(true);\r\n        })\r\n\r\n        this.socket.on(GAME_OVER, (user: string) => {\r\n            opponentGameOver(user);\r\n        })\r\n    }\r\n\r\n    updateGame = (updateSecondCanvas: any) => {\r\n        this.socket.on(GAME_UPDATE, (obj: any) => {\r\n            updateSecondCanvas(obj);\r\n        })\r\n    }\r\n    spectatingGames = (updateSpectatingCanvas: any) => {\r\n        this.socket.on(SEND_TO_SPECTATOR, (obj: any) => {\r\n            updateSpectatingCanvas(obj);\r\n        })\r\n\r\n    }\r\n\r\n    initMenu = (setHighscore: any) => {\r\n        this.socket.on(HIGHSCORE, (result: any) => {\r\n            setHighscore(result);\r\n        })\r\n\r\n    }\r\n    initUserContainer = (displayUsers: any,\r\n        setSender: any, setRequest: any, startGame: any, setSide: any, setRecievers: any,\r\n        addSpectator: any, updateAvailableGames: any, setInitBtn: any, updateGameSetupScreen: any,\r\n        emitGameSetup: any, reset: any, removeInvitedPlayer: any, removeGameMaster: any) => {\r\n        this.socket.on(RESET, (user: string) => {\r\n            removeInvitedPlayer(user);\r\n            removeGameMaster(user);\r\n        })\r\n        this.socket.on(USER_CONNECTED, (allUsers: any) => {\r\n            displayUsers(allUsers);\r\n        })\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            displayUsers(obj.allUsers);\r\n        })\r\n\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setSide(false);\r\n            setInitBtn(false);\r\n        })\r\n        this.socket.on(GAME_REQUEST, ({ sender }: any) => {\r\n            setSender(sender);\r\n        })\r\n        this.socket.on(GAME_START, ({ start }: any) => {\r\n            if (start) {\r\n                setRequest();\r\n                startGame();\r\n            }\r\n        })\r\n\r\n        this.socket.on(SPECTATE, (spectator: string) => {\r\n            addSpectator(spectator);\r\n        })\r\n        this.socket.on(SPECTATE_INFO, (recievers: any) => {\r\n            setRecievers(recievers);\r\n        })\r\n        this.socket.on(DISPLAY_GAMES, (gamesInProgress: any) => {\r\n            updateAvailableGames(gamesInProgress);\r\n        })\r\n        this.socket.on(GAME_SETUP, (obj: any) => {\r\n            updateGameSetupScreen(obj);\r\n        })\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf)\r\n                emitGameSetup();\r\n            else reset();\r\n        })\r\n    }\r\n\r\n    initRegister = (setError: any, setDisplay: any) => {\r\n        this.socket.on(REGISTER, (success: boolean) => {\r\n            if(success){\r\n                setDisplay({target: {value: 3}})\r\n            }\r\n            else {\r\n                setError(\"User already exists!\");\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    emitGameUpdate = (matrix: any, shape: any, reciever: string[], sender: string, totalScore: number, score: number, acceleration: number, blockSize: number) => {\r\n        this.socket.emit(GAME_UPDATE, { matrix, shape, reciever, sender, totalScore, score, acceleration, blockSize });\r\n    }\r\n    emitUserInGame = (username: string) => {\r\n        this.socket.emit(USER_IN_GAME, { username });\r\n    }\r\n    emitLogout = () => {\r\n        this.socket.emit(LOGOUT);\r\n    }\r\n    emitUserConnected = (user: any) => {\r\n        this.socket.emit(USER_CONNECTED, user);\r\n    }\r\n    emitUserReady = (user: string, reqSender: string) => {\r\n        this.socket.emit(USER_READY, { user, reqSender });\r\n    }\r\n    emitGameRequest = (sender: string, reciever: string) => {\r\n        this.socket.emit(GAME_REQUEST, { sender, reciever });\r\n    }\r\n    emitGameStart = (to: string[], user: string) => {\r\n        this.socket.emit(GAME_START, { to, user });\r\n    }\r\n    emitVerifyUser = (nickname: string, password: string, setUser: any) => {\r\n        this.socket.emit(VERIFY_USER, nickname, password, setUser);\r\n    }\r\n    emitReset = (to: string[], user: string, keepGameMode? : boolean) => {\r\n        this.socket.emit(RESET, { to, user, keepGameMode });\r\n    }\r\n    emitAddShapes = (reciever: string[]) => {\r\n        this.socket.emit(ADD_SHAPES, reciever);\r\n    }\r\n    emitSpectate = (user: string, game: string) => {\r\n        this.socket.emit(SPECTATE, { user, game });\r\n    }\r\n    emitSpectatorData = (matrix: any, shape: any, spectator: string, user: string, totalScore: number, score: number, blockSize: number) => {\r\n        this.socket.emit(SEND_TO_SPECTATOR, { matrix, shape, spectator, user, totalScore, score, blockSize });\r\n    }\r\n    emitInitializeGame = (sender: string, recievers: string[], difficulty: number) => {\r\n        this.socket.emit(INITIALIZE_GAME, { sender, recievers, difficulty });\r\n    }\r\n    emitRequestDenied = (user: string, reqSender: string) => {\r\n        this.socket.emit(REQUEST_DENIED, { user, reqSender })\r\n    }\r\n    emitGameOver = (user: string, recievers: string[], score: number, totalScore: number, difficulty: number) => {\r\n        this.socket.emit(GAME_OVER, { user, recievers, score, totalScore, difficulty });\r\n    }\r\n    emitGameSetup = (master: string, recievers: string[]) => {\r\n        this.socket.emit(GAME_SETUP, { master, recievers });\r\n    }\r\n\r\n    emitRegister = (name: string, password: string) => {\r\n        this.socket.emit(REGISTER, { name, password })\r\n    }\r\n\r\n    emitListUpdate = () => {\r\n        this.socket.emit(LIST_UPDATE);\r\n    }\r\n\r\n    emitMultiplayer = (user: string) => {\r\n        this.socket.emit(MULTIPLAYER, user);\r\n    }\r\n\r\n    emitMsg = (user: string, msg: string) => {\r\n        this.socket.emit(CHAT, {user, msg});\r\n    }\r\n\r\n}\r\n\r\nlet CM = new ClientManager();\r\nexport default CM;","import React from 'react'\r\n\r\nclass GameSetupScreen extends React.Component<\r\n    {\r\n        selectedPlayers: string[],\r\n        recievers: string[], user: string,\r\n        initializeGame: any,\r\n        denied: string[],\r\n        showInitBtn: boolean,\r\n        invitedPlayers: string[],\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    },\r\n    {}> {\r\n\r\n    createStringFromArray = (array: string[], str: string) => {\r\n        array.forEach(name => {\r\n            if (str) {\r\n                str += ', ' + name;\r\n            }\r\n            else str += name;\r\n        })\r\n        return str;\r\n    }\r\n\r\n    render() {\r\n        const { recievers, initializeGame, showInitBtn, invitedPlayers, isPlayer, gameMaster } = this.props;\r\n        \r\n      \r\n\r\n        return (\r\n            <div className={'gameSetup'}>\r\n                <p>Game Setup</p>\r\n\r\n                {invitedPlayers.length > 0 ?\r\n                    <div>\r\n                        <table className='tableLeft'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 1\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {gameMaster ? gameMaster : ' '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 3\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {invitedPlayers[1] ? invitedPlayers[1] : '  '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                        <table className='tableRight'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[0] ? invitedPlayers[0] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 2\r\n                                </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[2] ? invitedPlayers[2] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 4\r\n                                </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    : <p>Select players from left sidebar and then invite them or wait for an invite to enter a multiplayer game</p>}\r\n\r\n                \r\n                {(recievers.length > 0 && showInitBtn) ? <button className=\"roundBtn\" onClick={initializeGame} >Initialize Game</button> : null}\r\n                {isPlayer ? <div className=\"roundDiv\"><div className='innerRound'>Waiting for other players...</div></div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameSetupScreen","import React from 'react';\r\nimport CM from './ClientManager';\r\n\r\n\r\nclass Chat extends React.Component<{ user: string }, { message: string; chatMsgs: string }>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            message: \"\",\r\n            chatMsgs: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        CM.initChat(this.addMsg);\r\n    }\r\n    sendMsg = (event: any) => {\r\n        event.preventDefault();\r\n        const { user } = this.props;\r\n        const { message } = this.state;\r\n        CM.emitMsg(user, message);\r\n        this.setState({\r\n            message: \"\"\r\n        })\r\n    }\r\n\r\n    addMsg = (msg: string) => {\r\n        this.setState({\r\n            chatMsgs: this.state.chatMsgs + \"\\n\" + msg\r\n        })\r\n        var elem = document.getElementById('txt-area');\r\n        if(elem)\r\n        elem.scrollTop = elem.scrollHeight;\r\n    }\r\n\r\n    handleChange = (event: any) => {\r\n        const { value } = event.target;\r\n        this.setState({\r\n            message: value\r\n        })\r\n    }\r\n\r\n\r\n    render = () => {\r\n        const { message, chatMsgs } = this.state;\r\n        return (\r\n            <div className=\"chatContainer\"  >\r\n                <textarea id='txt-area' readOnly={true} value={chatMsgs}></textarea>\r\n                <div className='chatInputs'>\r\n                    <form onSubmit={this.sendMsg}>\r\n                        <input\r\n                            type='text'\r\n                            id='msg'\r\n                            value={message}\r\n                            onChange={this.handleChange}\r\n                            placeholder='enter your message here...'\r\n                            autoComplete='off'></input>\r\n                        <button>Send</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat","import React from 'react';\r\nimport { values } from 'lodash';\r\nimport GameRequest from './GameRequest';\r\nimport CM from './ClientManager';\r\nimport GameSetupScreen from './GameSetupScreen';\r\nimport Chat from './Chat';\r\n\r\n\r\nclass UserContainer extends React.Component<{\r\n    user: any, logout: any, setGeneratedShapes: any,\r\n    setRecievers: any, reciever: string[], startGame: any, isPlayerReady: boolean,\r\n    changeSpectatingStatus: any, running: boolean, reset: any,\r\n    addSpectator: any, initGame: any, denied: string[],\r\n    isSpectator: boolean\r\n},\r\n    {\r\n        users: any[],\r\n        reqSent: boolean,\r\n        sender: string,\r\n        showReq: boolean,\r\n        showSide: boolean,\r\n        selectedPlayers: string[],\r\n        games: any,\r\n        showInitBtn: boolean,\r\n        showStartBtn: boolean,\r\n        invitedPlayers: string[],\r\n        accepted: string[],\r\n        isGameMaster: boolean,\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    }>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            games: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        CM.initUserContainer(\r\n            this.displayUsers,\r\n            this.setSender, this.finalizeStart,\r\n            this.showRequest, this.setSide,\r\n            this.props.setRecievers, this.props.addSpectator,\r\n            this.updateAvailableGames,\r\n            this.setInitBtn, this.updateGameSetupScreen, this.emitGameSetup,\r\n            this.reset, this.removeInvitedPlayer, this.removeGameMaster\r\n        )\r\n        CM.emitListUpdate();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        const { reciever, user, isPlayerReady } = this.props;\r\n        const { gameMaster } = this.state;\r\n        if (user == gameMaster && !isPlayerReady) {\r\n            CM.emitGameSetup(user, reciever);\r\n            \r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        const {isGameMaster, gameMaster, invitedPlayers} = this.state;\r\n        if(isGameMaster){\r\n            CM.emitReset(invitedPlayers, this.props.user, false);\r\n        }\r\n        else CM.emitReset([gameMaster], this.props.user, false);\r\n    }\r\n\r\n    updateGameSetupScreen = (obj: any) => {\r\n        \r\n        this.setState({\r\n            invitedPlayers: obj.recievers,\r\n            gameMaster: obj.master\r\n        })\r\n\r\n    }\r\n\r\n    removeGameMaster = (user: string) => {\r\n        const {gameMaster} = this.state;\r\n        if(user == gameMaster) {\r\n            this.reset();\r\n            CM.emitReset([], this.props.user, true);\r\n        }\r\n    }\r\n\r\n    finalizeStart = () => {\r\n        this.props.startGame();\r\n        this.setState({ showStartBtn: false })\r\n    }\r\n\r\n    setSender = (sender: string) => {\r\n        this.setState({ sender, reqSent: true })\r\n    }\r\n    setRequest = () => {\r\n        this.setState({ reqSent: true, showReq: false });\r\n    }\r\n    setSide = (status: boolean) => {\r\n        this.setState({ showSide: status });\r\n    }\r\n    showRequest = (status: boolean) => {\r\n        this.setState({\r\n            showReq: status,\r\n            reqSent: false\r\n        })\r\n    }\r\n\r\n\r\n    accept = (tf: boolean) => {\r\n        const { user, isSpectator, reciever, changeSpectatingStatus, setRecievers } = this.props;\r\n        const { sender } = this.state;\r\n        this.setState({ showReq: false });\r\n        if (tf) {\r\n\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n\r\n            CM.emitUserReady(user, sender);\r\n            this.setState({\r\n                isGameMaster: false,\r\n                isPlayer: true\r\n            })\r\n        }\r\n        else {\r\n            CM.emitRequestDenied(user, sender);\r\n            if(!isSpectator)this.reset();\r\n        }\r\n    }\r\n    emitGameSetup = () => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ invitedPlayers: reciever })\r\n        CM.emitGameSetup(user, reciever);\r\n    }\r\n    removeInvitedPlayer = (user: string) => {\r\n        let {invitedPlayers}= this.state;\r\n        const index = invitedPlayers.indexOf(user);\r\n        if(index != -1){\r\n            invitedPlayers.splice(index, 1);\r\n            this.setState({\r\n                invitedPlayers\r\n            })\r\n        }\r\n    }\r\n\r\n    sendInvite = (event: any) => {\r\n        const { isPlayer } = this.state;\r\n        const { isSpectator, reciever, user, changeSpectatingStatus, setRecievers } = this.props;\r\n        let players = this.state.selectedPlayers;\r\n        let invited = this.state.invitedPlayers;\r\n        let index1 = players.indexOf(event.target.value);\r\n        let index2 = invited.indexOf(event.target.value);\r\n        if (!isPlayer) {\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n            if (index1 == -1 && index2 == -1) {\r\n                players.push(event.target.value);\r\n                event.target.innerHTML = \"Invited\";\r\n                event.target.disabled = true;\r\n                event.target.style.backgroundColor = \"green\";\r\n                this.setState({ isGameMaster: true, gameMaster: user });\r\n                CM.emitGameRequest(user, event.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    setInitBtn = (showInitBtn: boolean) => {\r\n        this.setState({ showInitBtn });\r\n    }\r\n\r\n\r\n    displayUsers = (allUsers: any) => {\r\n        const { user } = this.props;\r\n\r\n        let users: any = [];\r\n        users = values(allUsers).map((u) => {\r\n            if (u.name != user && !u.inGame && u.gameMode == 1) {\r\n                const className = (u.name.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n                return <div key={u.name} className={className}>{u.name}<button value={u.name} onClick={this.sendInvite}>Invite</button></div>;\r\n            }\r\n        })\r\n        /*let i =0;\r\n        while(i<20){\r\n            i++;\r\n            users.push(<div className='sideBtn'>Js<button>Invite</button></div>)\r\n        }*/\r\n        this.setState({ users: users })\r\n    }\r\n    updateAvailableGames = (games: any) => {\r\n        let users = values(games).map((u) => {\r\n            const className = (u.sender.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n            return <div className={className}>{u.sender}'s game<button value={u.sender} onClick={this.spectate}>Watch</button></div>;\r\n        })\r\n        this.setState({\r\n            games: users,\r\n        })\r\n    }\r\n    startGame = (event: any) => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ showReq: false });\r\n        setTimeout(() => CM.emitGameStart(reciever, user), 1500);\r\n    }\r\n    reset = () => {\r\n        let recievers = this.props.reciever;\r\n        if (this.state.gameMaster)\r\n            recievers.push(this.state.gameMaster);\r\n        CM.emitReset(recievers, this.props.user, true);\r\n\r\n        this.props.reset();\r\n        this.setState({\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: ''\r\n\r\n        });\r\n\r\n    }\r\n\r\n    spectate = (event: any) => {\r\n        //this.reset();\r\n        CM.emitSpectate(this.props.user, event.target.value);\r\n        this.props.changeSpectatingStatus(true);\r\n        this.setInitBtn(false);\r\n    }\r\n\r\n    render = () => {\r\n        const { user, isPlayerReady, running, reciever, initGame, denied, isSpectator } = this.props;\r\n        const { sender, reqSent, showReq, showSide, games, showInitBtn, showStartBtn, invitedPlayers, selectedPlayers, isGameMaster, isPlayer, gameMaster } = this.state;\r\n        let displayRecievers = \"\";\r\n        let displayGames = null;\r\n        if (games && !running) {\r\n            displayGames = games;\r\n        }\r\n        reciever.forEach(name => {\r\n            if (displayRecievers == \"\") {\r\n                displayRecievers += name;\r\n            }\r\n            else displayRecievers += \", \" + name;\r\n        })\r\n        return (\r\n            <div className='setupWrapper'>\r\n                {(showSide && !isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Available players:</p>{this.state.users}\r\n                    </div>\r\n                    : null}\r\n\r\n                {(showSide && isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Games:</p>{displayGames}\r\n                    </div>\r\n                    : null}\r\n\r\n                {showInitBtn ?\r\n                    <div>\r\n\r\n                        <GameSetupScreen\r\n                            user={user}\r\n                            initializeGame={initGame}\r\n                            selectedPlayers={selectedPlayers}\r\n                            recievers={reciever} denied={denied}\r\n                            showInitBtn={showInitBtn && isGameMaster && !isPlayer}\r\n                            invitedPlayers={invitedPlayers}\r\n                            isPlayer={isPlayer}\r\n                            gameMaster={gameMaster}\r\n                        />\r\n                        <Chat user={user} />\r\n                    </div> : null}\r\n\r\n                {(reqSent && showReq) ? <GameRequest name={sender} accept={this.accept} /> : null}\r\n                {(isPlayerReady && showStartBtn && isGameMaster) ? <div className='buttonsBlock'>\r\n\r\n                    <button className={'startBtn'} onClick={this.startGame}>Start</button><br></br>\r\n                </div> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserContainer\r\n\r\n","import React from 'react'\r\n\r\nclass Canvas extends React.Component<\r\n    {\r\n         rows: number,\r\n        columns: number, blockSize: number, canvasFront: any,\r\n        canvasBack: any, running? : boolean, isPlayerReady?: boolean, fixed?: boolean\r\n    },\r\n    {}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n       // this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    } \r\n    componentDidMount() {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize } = this.props;\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n       \r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        \r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions = () => {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize, running, isPlayerReady, fixed } = this.props;\r\n        if(!running && isPlayerReady && !fixed){\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n    }\r\n    }\r\n    \r\n    createGrid = (ctx: any) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#ccc';\r\n        for (let i = 1; i < rows; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, i * blockSize);\r\n            ctx.lineTo(columns * blockSize, i * blockSize);\r\n            ctx.stroke();\r\n        }\r\n        for (let i = 1; i < columns; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(i * blockSize, 0);\r\n            ctx.lineTo(i * blockSize, rows * blockSize);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize, canvasFront, canvasBack } = this.props\r\n        const style = { \"height\": rows * blockSize, \"width\": columns * blockSize };\r\n        return (\r\n            <div >\r\n\r\n                <div className='canvasBlock'>\r\n                    <canvas className='FrontCanvas' style={style} ref={canvasFront}></canvas>\r\n                    <canvas className='BackCanvas' style={style} ref={canvasBack}></canvas>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from 'react';\r\n\r\nclass MiniCanvas extends React.Component<{\r\n    canvasSide: any, rowScore: number,\r\n     totalScore: number, blockSize: number, columns: number,\r\n      showSide: boolean, name: string, running?: boolean, isPlayerReady?: boolean\r\n},{}> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {canvasSide, columns, blockSize} = this.props;\r\n        if (canvasSide != null) {\r\n        let c3: any = canvasSide.current;\r\n        if(c3){\r\n            c3.width = columns / 2 * blockSize;\r\n            c3.height = blockSize * 2;\r\n        }\r\n        }\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions() {\r\n        const { canvasSide, columns, blockSize, running, isPlayerReady } = this.props;\r\n        if(!running && isPlayerReady){\r\n            if (canvasSide != null) {\r\n                let c3: any = canvasSide.current;\r\n                if(c3){\r\n                    c3.width = columns / 2 * blockSize;\r\n                    c3.height = blockSize * 2;\r\n                }\r\n                }\r\n    }\r\n    }\r\n    render() {\r\n        const {canvasSide, rowScore, totalScore, blockSize, columns, showSide, name} = this.props;\r\n        const style2 = { \"height\": blockSize * 2, \"width\": columns / 2  * blockSize };      \r\n        return (\r\n            <div className='sideBlock'>\r\n                    {showSide ? <canvas className='SideCanvas' style={style2} ref={canvasSide}></canvas> : null }\r\n                    <div className={'score'}>\r\n                    <table className={'infoTable'}>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>User:</td><td className={'rightTD'}>{name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Lines:</td><td className={'rightTD'}>{rowScore}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Score:</td><td className={'rightTD'}>{totalScore}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MiniCanvas;","import React from 'react';\r\n\r\nclass Popup extends React.Component<{user: string, accepted: boolean, resetPopup: any}, {}> {\r\n    close = () => {\r\n        this.props.resetPopup();\r\n    }\r\n    render() {\r\n        const {user, accepted} = this.props;\r\n        return (\r\n            <div className={'request'} >\r\n                \r\n                <p>\r\n                {user}{accepted ? ' accepted your request' : ' denied your request'}\r\n                </p>\r\n                <div>\r\n                <button onClick={this.close}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popup;","import React from 'react';\r\n\r\nfunction WinnerPopup(props: any) {\r\n    return (\r\n        <div className='winnerPopup'>\r\n        <button onClick={props.close}>Close</button>\r\n        Winner is: {props.winner}<br></br>\r\n        Score is: {props.score}</div>\r\n    )\r\n}\r\n\r\nexport default WinnerPopup","import React from 'react';\r\nimport Canvas from './Canvas';\r\nimport UniversalShape from './UniversalShape';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\nconst { generateShapes } = require('./Factories')\r\n\r\ninterface AutoProps {\r\n    rows: number, columns: number, blockSize: number\r\n}\r\ninterface AutoState {\r\n    index: number, moveCounter: number, matrix: any[], generatedShapes: any[], speed: number, intervalId: any\r\n}\r\n\r\nclass AutoComplete extends React.Component<AutoProps, AutoState> {\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: AutoProps) {\r\n        super(props);\r\n        let generatedShapes = this.setGeneratedShapes(generateShapes(1000, 7));\r\n        let matrix = createEmptyMatrix(props.columns, props.rows)\r\n        this.state = {\r\n            index: 0,\r\n            moveCounter: 0,\r\n            matrix,\r\n            generatedShapes,\r\n            speed: 50,\r\n            intervalId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // this.setState({ matrix: this.props.createEmptyMatrix(), generatedShapes: this.setGeneratedShapes(generateShapes(1000, 7)) })\r\n        if (this.state.generatedShapes)\r\n            this.autoMove();\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.props;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    tempShape = (shape: UniversalShape): UniversalShape => {\r\n        let coordinatesArr: any[] = [];\r\n\r\n        shape.coordiantesArr.forEach((coords: any) => {\r\n            let innerC: any[] = []\r\n            coords.forEach((c: any) => {\r\n                innerC.push({ y: c.y, x: c.x });\r\n            })\r\n            coordinatesArr.push(innerC);\r\n        })\r\n        let copy: UniversalShape = new UniversalShape(coordinatesArr, shape.columns, shape.rows, shape.size, shape.color);\r\n        return copy;\r\n    }\r\n\r\n    numberOfFilledFields = (matrix: any[], newMatrix: any[]) => {\r\n        let counter = 0;\r\n        let max: number, maxNew: number, maxi = 0;\r\n        for (let i = 0; i < matrix.length - 1; i++) {\r\n            max = 0;\r\n            maxNew = 0;\r\n            matrix[i].forEach((element: any) => {\r\n                if (element.status) max++;\r\n            })\r\n            newMatrix[i].forEach((element: any) => {\r\n                if (element.status) maxNew++;\r\n            })\r\n            if (maxNew > max) {\r\n                counter = counter + (maxNew - max) * i;\r\n\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const { columns } = this.props;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < columns; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n\r\n        this.setState({\r\n            matrix: mat\r\n        })\r\n    }\r\n\r\n    autoMove = () => {\r\n        const { index, matrix, speed } = this.state;\r\n        let { generatedShapes } = this.state\r\n        const { columns, rows, blockSize } = this.props;\r\n        if (undefined == generatedShapes[index]) {\r\n            let gen = this.setGeneratedShapes(generateShapes(1000, 7));\r\n            generatedShapes = generatedShapes.concat(gen);\r\n            this.setState({ generatedShapes })\r\n        }\r\n        let shape: UniversalShape = generatedShapes[index];\r\n        const bestShape = this.findBestPosition(shape);\r\n        let rotation = 0;\r\n        let canvas = this.canvasFront.current;\r\n        let canvas2 = this.canvasBack.current;\r\n        if (canvas && canvas2) {\r\n            let ctx = canvas.getContext('2d');\r\n            let ctx2 = canvas2.getContext('2d');\r\n            let id = setInterval(() => {\r\n                this.setState({ intervalId: id });\r\n                if (rotation < bestShape.rotation) {\r\n                    shape.rotate();\r\n                    rotation++;\r\n                    if (ctx)\r\n                        ctx.clearRect(0, 0, 2000, 2000)\r\n                    if (shape)\r\n                        shape.updateCanvas(ctx);\r\n                }\r\n                else if (bestShape.bestShape.blocksArr)\r\n                    if (shape.blocksArr[0].left > bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveLeft(matrix)) {\r\n                            shape.moveLeft();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else if (shape && shape.blocksArr[0].left < bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveRight(matrix)) {\r\n                            shape.moveRight();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (shape && shape.areBlocksFreeToMoveDown(matrix)) {\r\n\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000);\r\n                            shape.updateCanvas(ctx);\r\n                            shape.moveDown();\r\n                        }\r\n                        else {\r\n                            shape.moveBack();\r\n                            shape.updateCanvas(ctx);\r\n                            let newMatrix = this.addShapeToMatrix(bestShape.bestShape, matrix);\r\n                            this.setState({ matrix: newMatrix, index: index + 1 })\r\n                            if (isRowComplete(columns, rows, matrix).length > 0) {\r\n                                isRowComplete(columns, rows, matrix).forEach((index: number) => {\r\n                                    this.clearRow(index);\r\n                                    if (ctx2)\r\n                                        ctx2.clearRect(0, 0, 2000, 2000)\r\n                                    createGrid(ctx2, columns, rows, blockSize);\r\n                                    this.fillCanvas(ctx2);\r\n                                });\r\n                            }\r\n                            if (ctx2)\r\n                                ctx2.clearRect(0, 0, 2000, 2000)\r\n                            createGrid(ctx2, columns, rows, blockSize);\r\n                            this.fillCanvas(ctx2);\r\n                            clearInterval(id);\r\n                            this.autoMove();\r\n                        }\r\n                    }\r\n            }, speed)\r\n        }\r\n\r\n    }\r\n\r\n    fillCanvas = (ctx: any) => {\r\n        const { matrix } = this.state;\r\n        const { columns, rows, blockSize } = this.props;\r\n        let temp: BaseBuildingSquare = new BaseBuildingSquare(0, blockSize, \"red\", blockSize)\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    temp.draw(j * blockSize, i * blockSize, ctx, matrix[i][j].color);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    copyBlocks = (blocks: BaseBuildingSquare[]): BaseBuildingSquare[] => {\r\n\r\n        let topNegative = false;\r\n        let leftNegative = false;\r\n        for (let i = 0; i < 4; i++) {\r\n            if (blocks[i].top < 0) topNegative = true;\r\n            if (blocks[i].left < 0) leftNegative = true;\r\n        }\r\n        let temp: BaseBuildingSquare[] = blocks.map(block => {\r\n\r\n            if (!topNegative && !leftNegative)\r\n                return new BaseBuildingSquare(block.left, block.top, block.color, block.size);\r\n            else return new BaseBuildingSquare(0, 0, block.color, block.size);\r\n        })\r\n        return temp\r\n    }\r\n\r\n    findBestPosition = (shape: UniversalShape) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        const { matrix } = this.state;\r\n        let counter = columns;\r\n        let max = 0;\r\n        let rowsToClean = 0, rowNum;\r\n        let bestShape: any = [];\r\n        let arr = this.copyMatrix(matrix);\r\n        let maxMoves = 0;\r\n        let moved = 0;\r\n        let rotation = 0;\r\n        let rowCountSum: number = 0;\r\n        let rowCountTemp: number = 0;\r\n\r\n        if (shape)\r\n            for (let j = 0; j < shape.coordiantesArr.length; j++) {\r\n                let temp: UniversalShape = this.tempShape(shape);\r\n                for (let i = 0; i < columns; i++) {\r\n                    temp = this.tempShape(shape);\r\n\r\n                    //if (temp.areBlocksFreeToRotate(matrix))\r\n                    temp.setBlocks(shape.fillArr(shape.coordiantesArr[j], blockSize, columns));\r\n                    if (temp.areBlocksFreeToMoveRight(matrix)) {\r\n                        while (temp.areBlockOutOfBoundsLeft()) temp.moveLeft();\r\n                        //if (i != 0) {\r\n                        for (let k = 0; k < i; k++)\r\n                            temp.moveRight();\r\n                        // }\r\n                        moved = 0;\r\n                        while (temp.areBlocksFreeToMoveDown(matrix)) {\r\n                            temp.moveDown();\r\n                            moved++;\r\n                        }\r\n                        counter = temp.areBlocksFreeToMoveDownNumber(matrix);\r\n                        temp.moveBack();\r\n\r\n                        arr = this.addShapeToMatrix(temp, arr);\r\n                        rowCountTemp = this.numberOfFilledFields(matrix, arr);\r\n                        rowNum = isRowComplete(columns, rows, arr).length\r\n                        if (this.isShapeAVerticalLine(temp)) {\r\n                            counter = 4;\r\n                            max = 4;\r\n                        }\r\n\r\n                        if (rowNum > 0 && counter == 4) {\r\n                            max = counter;\r\n                            bestShape = temp;\r\n                            rotation = j;\r\n                            rowsToClean = rowNum;\r\n                            return { bestShape, rotation };\r\n                        }\r\n                        else if (rowCountSum <= rowCountTemp && counter == 4) {\r\n\r\n                            max = counter;\r\n\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        else if (max <= counter && max != 4) {\r\n\r\n                            max = counter;\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        /*   else if (max < counter) {\r\n                               if (rowCountSum <= rowCountTemp) {\r\n       \r\n                                   max = counter;\r\n       \r\n                                   rowCountSum = rowCountTemp;\r\n                                   maxMoves = moved;\r\n                                   rotation = j;\r\n                                   bestShape = temp;\r\n                               }\r\n                               else if (!bestShape) {\r\n                                   bestShape = temp;\r\n                                   rotation = j\r\n                               }\r\n                           }*/\r\n                        /* rowCountSum = rowCountTemp;\r\n                         bestShape = temp;\r\n                         rotation = j;\r\n                         }\r\n                     \r\n                    else \r\n                   */\r\n                        /* if (rowNum > 0 && rowNum > rowsToClean) {\r\n                                bestShape = temp;\r\n                                rotation = j;\r\n                                rowsToClean = rowNum;\r\n                                \r\n                            }\r\n                            else if(rowCountSum<rowCountTemp){\r\n                                rowCountSum = rowCountTemp;\r\n                            if ((max < counter || this.isShapeAVerticalLine(temp)) && rowsToClean == 0) {\r\n                                if (this.isShapeAVerticalLine(temp) && max != 4) counter == 4;\r\n                                max = counter;\r\n                                \r\n                                if (maxMoves - 1 <= moved && moved > 4) {\r\n                                    maxMoves = moved;\r\n                                    rotation = j;\r\n                                    bestShape = temp;\r\n                                }\r\n                            }\r\n                                else if (!bestShape) {\r\n                                    bestShape = temp;\r\n                                    rotation = j\r\n                                }\r\n                            }*/\r\n                        else if (!bestShape) bestShape = temp;\r\n                        arr = this.removeShapeFromMatrix(temp, arr);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        return { bestShape, rotation }\r\n    }\r\n\r\n    getMatrixHeight = (columns: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    return rows - i;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    getColumnHeight = (columnIndex: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n\r\n            if (matrix[i][columnIndex].status) {\r\n                return rows - i;\r\n            }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    isShapeAVerticalLine = (shape: UniversalShape) => {\r\n        if (shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left && shape.blocksArr[0].left == shape.blocksArr[2].left) return true;\r\n        else return false;\r\n    }\r\n    doesShapeNeedOneBlock = (shape: UniversalShape) => {\r\n        if (\r\n            shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left\r\n        ) return true;\r\n        else return false;\r\n    }\r\n\r\n    copyMatrix = (matrix: any[]) => {\r\n        let newMatrix = matrix.map((row: any) => {\r\n            return row.map((field: any) => {\r\n                return { status: field.status, color: field.color };\r\n            })\r\n        });\r\n        return newMatrix\r\n    }\r\n\r\n    addShapeToMatrix = (shape: UniversalShape, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = true;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = element.color;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    removeShapeFromMatrix = (shape: any, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = false;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = 'white';\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    changeSpeed = (event: any) => {\r\n        let speed: number = this.state.speed;\r\n        speed += (event.target.value) * 1;\r\n        if (speed >= 10) {\r\n            this.setState({ speed });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize } = this.props;\r\n        return (\r\n            <div className=\"transparent\">\r\n\r\n                <Canvas rows={rows} columns={columns} blockSize={blockSize} canvasBack={this.canvasBack} canvasFront={this.canvasFront} fixed={true} />\r\n                <button onClick={this.changeSpeed} value={-10}>Faster</button><button onClick={this.changeSpeed} value={10}>Slower</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AutoComplete","import React from 'react';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nimport UniversalShape from './UniversalShape';\r\nimport UserContainer from './UserContainer';\r\nimport Canvas from './Canvas';\r\nimport MiniCanvas from './MiniCanvas';\r\nimport CM from './ClientManager';\r\nimport Popup from './Popup';\r\nimport WinnerPopup from './WinnerPopup';\r\nimport AutoComplete from './AutoComplete';\r\nconst { generateShapes } = require('./Factories')\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\n\r\ninterface MyState {\r\n    currentShape: UniversalShape;\r\n    nextShape: UniversalShape;\r\n    allBlocks: UniversalShape[];\r\n    running: boolean;\r\n    matrix: any[];\r\n    score: number;\r\n    scorePlayer2: number;\r\n    totalScorePlayer2: number;\r\n    scorePlayer3: number;\r\n    totalScorePlayer3: number;\r\n    scorePlayer4: number;\r\n    totalScorePlayer4: number;\r\n    totalScore: number;\r\n    speed: number;\r\n    counterId: number;\r\n    delay: number;\r\n    baseDelay: number;\r\n    acceleration: number;\r\n    columns: number;\r\n    rows: number;\r\n    blockSize: number;\r\n    user: any;\r\n    recievers: string[];\r\n    generatedShapes: any;\r\n    generatedShapesIndex: number;\r\n    isPlayerReady: boolean;\r\n    spectators: string[];\r\n    isSpectator: boolean;\r\n    specCanvases: any;\r\n    reqAccepted: any;\r\n    denied: string[];\r\n    difficulty: number;\r\n    gameMode: number;\r\n    windowHeight: number;\r\n    windowWidth: number;\r\n    shapesCoords: any[];\r\n    winner: any;\r\n}\r\ninterface USCProps {\r\n    setDisplay: any;\r\n    user: any;\r\n    difficulty: number;\r\n    mode: number;\r\n}\r\n\r\nclass UniversalShapeContext extends React.Component<USCProps, MyState>{\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n    canvasSide = React.createRef<HTMLCanvasElement>();\r\n    canvasBack2 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack3 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack4 = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let spect = (props.mode == 3) ? true : false;\r\n        this.state = {\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: [],\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: props.user,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: spect,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: props.difficulty,\r\n            gameMode: props.mode,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth,\r\n            shapesCoords: [],\r\n            winner: null\r\n        }\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    /*    this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);*/\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            matrix: createEmptyMatrix(10, 20)\r\n        })\r\n       // this.addEventListeners();\r\n        this.initSocket();\r\n\r\n        this.updateWindowDimensions();\r\n        \r\n        if (this.state.gameMode == 1) {\r\n            this.singlePlayer();\r\n        }\r\n    }\r\n\r\n    addEventListeners = () => {\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n        window.addEventListener('keyup', this.onKeyUp);\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.counterId);\r\n        CM.emitReset(this.state.recievers, this.state.user.name, false);\r\n\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n        window.removeEventListener('keyup', this.onKeyUp);\r\n\r\n        //   CM.emitLogout(this.stopGame)\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    updateWindowDimensions() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState({ windowWidth: width, windowHeight: height });\r\n        if (!this.state.running) {\r\n            let size = 40;\r\n            if (height >= 900) {\r\n                size = 40;\r\n            }\r\n            if (height < 900) {\r\n                size = 35;\r\n            }\r\n            if (height < 800) {\r\n                size = 30;\r\n            }\r\n            if (height < 700) {\r\n                size = 25;\r\n            }\r\n            this.setState({\r\n                blockSize: size\r\n\r\n            })\r\n            if (this.state.user) {\r\n\r\n                const shapes = this.setGeneratedShapes(this.state.shapesCoords);\r\n                this.setState({ generatedShapes: shapes });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    initSocket = () => {\r\n        const { columns, rows, blockSize } = this.state;\r\n        const generatedShapes = CM.generateShapes(columns, rows, blockSize);\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0]\r\n        });\r\n        CM.initMainTetrisContext(this.setGeneratedShapes, this.setReciever, this.addShapes, this.showAccepted, this.setRecievers, this.removeSpectator, this.opponentGameOver, this.removeReciever, this.setShapesCoords, this.setPlayerReady, this.setDifficulty, this.displayWinner);\r\n        CM.updateGame(this.updateSecondCanvas);\r\n        CM.spectatingGames(this.updateSpectatingCanvas);\r\n\r\n    }\r\n\r\n    displayWinner = (winnerData: any) => {\r\n        this.setState({\r\n            winner: <WinnerPopup winner={winnerData.winner} score={winnerData.score} close={this.hideWinner} />\r\n        })\r\n    }\r\n    hideWinner = () => {\r\n        this.setState({ winner: null });\r\n    }\r\n\r\n    setShapesCoords = (shapesCoords: any[]) => {\r\n        this.setState({ shapesCoords })\r\n    }\r\n\r\n    setDifficulty = (difficulty: number) => {\r\n        this.setState({ difficulty });\r\n    }\r\n\r\n    setRecievers = (recievers: string[]) => {\r\n        this.setState({ recievers });\r\n    }\r\n\r\n    removeReciever = (reciever: string) => {        \r\n        let recs = this.state.recievers;\r\n        const { running } = this.state;\r\n        let index = recs.indexOf(reciever);\r\n        if (index != -1 && !running) {\r\n            recs.splice(index, 1);\r\n            this.setState({\r\n                recievers: recs\r\n            })\r\n        }\r\n    }\r\n\r\n    opponentGameOver = (user: string) => {\r\n        const { recievers } = this.state;\r\n        const index = recievers.indexOf(user);\r\n        if(index !=-1){\r\n        let canvas = this.getCanvasBasedOnRecieverIndex(index);\r\n        this.gameOver(canvas);\r\n        }\r\n    }\r\n\r\n    addShapes = (newCoords: any) => {\r\n        let currentShapes = this.state.generatedShapes;\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        let newShapes = newCoords.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        generatedShapes = currentShapes.concat(newShapes);\r\n        this.setState({\r\n            generatedShapes\r\n        });\r\n    }\r\n\r\n    addSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator);\r\n        if (index == -1) {\r\n            specs.push(spectator);\r\n            this.setState({\r\n                spectators: specs\r\n            })\r\n        }\r\n    }\r\n\r\n    removeSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator)\r\n        if (index != -1) {\r\n            specs.splice(index, 1);\r\n        }\r\n        this.setState({\r\n            spectators: specs\r\n        })\r\n    }\r\n\r\n    showAccepted = (user: string, tf: boolean) => {\r\n        this.setState({\r\n            reqAccepted: <Popup user={user} accepted={tf} resetPopup={this.resetPopup} />\r\n        })\r\n        if (!tf) {\r\n            let d = this.state.denied;\r\n            d.push(user);\r\n            this.setState({\r\n                denied: d\r\n            })\r\n        }\r\n        setTimeout(this.resetPopup, 5000);\r\n    }\r\n\r\n    resetPopup = () => {\r\n        this.setState({\r\n            reqAccepted: null\r\n        })\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0],\r\n\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    changeSpectatingStatus = (tf: boolean) => {\r\n        this.setState({\r\n            isSpectator: tf\r\n        })\r\n    }\r\n\r\n    setUser = (user: any) => {\r\n        CM.emitUserConnected(user);\r\n        this.setState({ user })\r\n    }\r\n\r\n    logout = (e: any) => {\r\n        e.preventDefault();\r\n        CM.emitLogout();\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: null,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            nextShape: this.defaultShape(),\r\n        })\r\n    }\r\n\r\n\r\n    deepCopyShape(obj: any): any {\r\n        var copy: any = obj;\r\n        if (null == obj || \"object\" != typeof obj) return obj;\r\n        if (obj instanceof Object) {\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = this.deepCopyShape(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n    }\r\n\r\n    updateSecondCanvas = (obj: any) => {\r\n        const { columns, blockSize, rows, recievers } = this.state;\r\n        let acc = this.state.acceleration;\r\n        const userIndex = recievers.indexOf(obj.sender);\r\n        let c2: any;\r\n        if (obj.acceleration > acc) {\r\n            this.setState({ acceleration: obj.acceleration });\r\n\r\n        }\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        switch (userIndex) {\r\n            case 0: {\r\n                c2 = this.canvasBack2.current; this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                });\r\n            };\r\n                break;\r\n            case 1: {\r\n                c2 = this.canvasBack3.current;\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                });\r\n            }; break;\r\n            case 2: {\r\n                c2 = this.canvasBack4.current;\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                });\r\n            }; break;\r\n        }\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanvasBasedOnRecieverIndex = (index: number) => {\r\n        let c2: any = this.canvasBack.current;\r\n        switch (index) {\r\n            case 0:\r\n                c2 = this.canvasBack2.current;\r\n                ;\r\n                break;\r\n            case 1:\r\n                c2 = this.canvasBack3.current;\r\n                ; break;\r\n            case 2:\r\n                c2 = this.canvasBack4.current;\r\n                ; break;\r\n            case 3:\r\n                c2 = this.canvasBack.current;\r\n                ; break;\r\n\r\n        }\r\n        return c2;\r\n    }\r\n\r\n    setScoreBasedOnRecieverIndex = (index: number, obj: any) => {\r\n        switch (index) {\r\n            case 0:\r\n                this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                }); break;\r\n            case 1:\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                })\r\n                    ; break;\r\n            case 2:\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                })\r\n                    ; break;\r\n            case 3:\r\n                this.setState({\r\n                    totalScore: obj.totalScore,\r\n                    score: obj.score\r\n                })\r\n                    ; break;\r\n\r\n        }\r\n    }\r\n\r\n    updateSpectatingCanvas = (obj: any) => {\r\n        const { recievers, columns, blockSize, rows } = this.state;\r\n        let c2: any = this.canvasBack.current;\r\n        const userIndex = recievers.indexOf(obj.user);\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        c2 = this.getCanvasBasedOnRecieverIndex(userIndex);\r\n        this.setScoreBasedOnRecieverIndex(userIndex, obj);\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeyDown = (event: any) => {\r\n        event.preventDefault();\r\n        if (this.state.running) {\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n            const acc = this.state.acceleration;\r\n            let score = this.state.totalScore;\r\n            let delay = 22 - acc;\r\n\r\n            if (event.keyCode == 39 && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            else if (event.keyCode == 37 && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            shape.updateCanvas(ctx1);\r\n            if (event.keyCode == 38) {\r\n                this.handleRotate();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            if (event.keyCode == 40) {\r\n                this.setState({\r\n                    baseDelay: 1\r\n                })\r\n            }\r\n            if (event.keyCode == 32) {\r\n                let i = 0;\r\n                while (shape.areBlocksFreeToMoveDown(mat)) {\r\n                    shape.moveDown();\r\n                    i += 1;\r\n                }\r\n                if (!shape.areBlocksFreeToMoveDown(mat)) {\r\n                    this.state.currentShape.moveBack()\r\n                    this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                        if (element) {\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].status = true;\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].color = element.color;\r\n                        }\r\n                    });\r\n                    this.setState({\r\n                        matrix: mat,\r\n                        totalScore: score + i\r\n                    })\r\n                    this.updateStateOfTheGame(shape);\r\n                    clearInterval(this.state.counterId);\r\n                    this.run();\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyUp = (event: any) => {\r\n        event.preventDefault();\r\n        if (event.keyCode == 40) {\r\n            let acc = this.state.acceleration;\r\n            this.setState({\r\n                baseDelay: 20 - acc\r\n            })\r\n        }\r\n    }\r\n\r\n    defaultShape = (): UniversalShape => {\r\n        return new UniversalShape([[{ x: 0, y: 0 }]], 10, 20, 40, 'red');\r\n    }\r\n\r\n    startGame = () => {\r\n        this.addEventListeners();\r\n        if (!this.state.running) {\r\n            const { user, gameMode } = this.state;\r\n            if (gameMode == 2)\r\n                CM.emitUserInGame(user.name);\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n\r\n            this.run();\r\n            let c1: any = this.canvasBack.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, col * size, row * size);\r\n                this.setState({\r\n                    matrix: createEmptyMatrix(col, row),\r\n                    score: 0,\r\n                    totalScore: 0\r\n                })\r\n                createGrid(ctx1, col, row, size);\r\n            }\r\n        }\r\n    }\r\n\r\n    run = () => {\r\n        this.setState({\r\n            running: true\r\n        })\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let arr = this.state.matrix;\r\n        const { generatedShapes, nextShape, recievers, user, gameMode, score, totalScore, difficulty } = this.state;\r\n        let index = this.state.generatedShapesIndex;\r\n        let acc = this.state.acceleration;\r\n        if (generatedShapes)\r\n            if (index + 10 == generatedShapes.length) {\r\n                if (gameMode == 2)\r\n                    CM.emitAddShapes(recievers);\r\n            }\r\n        this.setState({\r\n            baseDelay: 20 - acc\r\n        })\r\n        let c1: any = this.canvasFront.current;\r\n        if (c1) {\r\n            const ctx1: any = c1.getContext('2d');\r\n            index += 1;\r\n            this.setState({ generatedShapesIndex: index });\r\n            const shape = generatedShapes[index];\r\n\r\n            const next: UniversalShape = this.deepCopyShape(nextShape);\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            const sidec: any = this.canvasSide.current;\r\n            const sidectx = sidec.getContext('2d');\r\n            sidectx.clearRect(0, 0, col * size, row * size);\r\n            if (nextShape != null) {\r\n                nextShape.updateCanvas(ctx1);\r\n            }\r\n            if (sidectx) {\r\n                let tempShape = this.deepCopyShape(shape);\r\n                tempShape.fitToSide(2.5);\r\n                tempShape.updateCanvas(sidectx);\r\n                tempShape.fitToSide(-2.5);\r\n            }\r\n            this.setState({\r\n                currentShape: next,\r\n                nextShape: shape\r\n            })\r\n            if (isRowComplete(col, row, arr).length > 0) {\r\n                isRowComplete(col, row, arr).forEach((index: number) => {\r\n                    this.clearRow(index);\r\n                });\r\n            }\r\n            if (!this.isGameOver(shape, arr)) {\r\n                let inter: any = setInterval(() => this.moveShape(next, inter), 50);\r\n                this.setState({\r\n                    counterId: inter,\r\n                })\r\n            }\r\n            else {\r\n                let totalScore = this.state.totalScore - 10;\r\n                this.setState({\r\n                    running: false, totalScore\r\n                });\r\n                this.gameOver(c1);\r\n\r\n                CM.emitGameOver(user.name, recievers, score, totalScore, difficulty);\r\n            }\r\n        }\r\n    }\r\n    gameOver = (canvas: any) => {\r\n        if (canvas) {\r\n            let ctx = canvas.getContext('2d');\r\n            let size = canvas.width / 10 + \"px\";\r\n            ctx.font = \"bold \" + size + \" Verdana\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n            ctx.strokeStyle = 'black';\r\n            ctx.strokeText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n        }\r\n    }\r\n    moveShape = (shape: any, inter: any) => {\r\n        let delay = this.state.delay;\r\n\r\n        const { user, columns, rows, blockSize, totalScore, score, recievers, acceleration, spectators, gameMode } = this.state;\r\n        let arr = this.state.matrix;\r\n        if (user && shape) {\r\n            if (gameMode == 2) {\r\n                CM.emitGameUpdate(arr, shape, recievers, user.name, totalScore, score, acceleration, blockSize);\r\n            }\r\n\r\n        }\r\n        if (spectators) {\r\n            spectators.forEach(name => {\r\n                CM.emitSpectatorData(arr, shape, name, user.name, totalScore, score, blockSize);\r\n            })\r\n        }\r\n        if (delay <= this.state.baseDelay) {\r\n            delay++;\r\n            this.setState({\r\n                delay: delay\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                delay: 1,\r\n                baseDelay: 20 - acceleration\r\n            })\r\n            let c1: any = this.canvasFront.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, columns * blockSize, rows * blockSize);\r\n\r\n                shape.moveDown();\r\n\r\n                if (shape.areBlocksFreeToMoveDown(arr))\r\n                    shape.updateCanvas(ctx1);\r\n            }\r\n            if (!shape.areBlocksFreeToMoveDown(arr)) {\r\n                this.state.currentShape.moveBack();\r\n                this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].status = true;\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].color = element.color;\r\n                });\r\n                this.setState({\r\n                    matrix: arr,\r\n\r\n                })\r\n\r\n                this.updateStateOfTheGame(shape);\r\n                clearInterval(inter);\r\n                this.run();\r\n\r\n            }\r\n        }\r\n    }\r\n    stopGame = () => {\r\n        clearInterval(this.state.counterId);\r\n    }\r\n    updateStateOfTheGame = (shape: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let mat = this.state.matrix;\r\n        let c1: any = this.canvasBack.current;\r\n        let total = this.state.totalScore;\r\n        const ctx1: any = c1.getContext('2d');\r\n        const rowsToClear = isRowComplete(col, row, mat);\r\n        if (rowsToClear.length > 0) {\r\n            switch (rowsToClear.length) {\r\n                case 1: total += 100; break;\r\n                case 2: total += 250; break;\r\n                case 3: total += 450; break;\r\n                case 4: total += 800; break;\r\n            }\r\n            rowsToClear.forEach((index: number) => {\r\n                this.clearRow(index);\r\n            });\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            createGrid(ctx1, col, row, size);\r\n        }\r\n\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'blue', size)\r\n        for (let i = 0; i < row; i++) {\r\n            for (let j = 0; j < col; j++) {\r\n                if (mat[i][j].status) {\r\n                    shape1.draw(j * size, i * size, ctx1, mat[i][j].color);\r\n                }\r\n            }\r\n        }\r\n        total += 10;\r\n        let arr = this.state.allBlocks;\r\n        shape.moveBack();\r\n        arr.push(this.state.currentShape);\r\n        this.setState({\r\n            totalScore: total\r\n        })\r\n        let acc = this.state.acceleration;\r\n        if (this.state.totalScore > 400 * (acc + 1)) {\r\n            acc++;\r\n            if (acc < 20)\r\n                this.setState({\r\n                    acceleration: acc\r\n                })\r\n        }\r\n    }\r\n\r\n    isGameOver = (shape: any, matrix: any[]) => {\r\n        return !shape.areBlocksFreeToMoveDown(matrix)\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const col = this.state.columns;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < col; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n        let score = this.state.score;\r\n        score += 1;\r\n\r\n        this.setState({\r\n            matrix: mat,\r\n            score: score,\r\n        })\r\n    }\r\n\r\n    handleMove = (event: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            const id = event.target.id;\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n\r\n            if (id == 'right' && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n            }\r\n            else if (id == 'left' && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n\r\n            }\r\n            ctx1.clearRect(0, 0, size * col, size * row);\r\n            shape.updateCanvas(ctx1);\r\n        }\r\n    }\r\n\r\n    handleRotate = () => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            let shape: UniversalShape = this.deepCopyShape(this.state.currentShape);\r\n            let shapehelp = this.state.currentShape;\r\n            shape.rotate();\r\n            if (!shape.areBlockOutOfRotateBoundsLeft() || !shape.areBlockOutOfRotateBoundsRight()) {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n            else if (shape.areBlocksFreeToRotate(this.state.matrix)) {\r\n\r\n                let c1: any = this.canvasFront.current;\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, size * col, size * row);\r\n                shape.updateCanvas(ctx1);\r\n            }\r\n            else {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                currentShape: shape\r\n            });\r\n        }\r\n    }\r\n    setReciever = (reciever: any) => {\r\n        let rec = this.state.recievers;\r\n        if (rec.length < 3) {\r\n            rec.push(reciever);\r\n        }\r\n        this.setState({\r\n            recievers: rec\r\n        })\r\n    }\r\n    reset = () => {\r\n        clearInterval(this.state.counterId);\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: false,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: 7,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        })\r\n    }\r\n\r\n    generateSpecCanvases = () => {\r\n        const { rows, columns, blockSize, recievers, running, isPlayerReady } = this.state;\r\n        let canvases = [];\r\n        for (let i = 0; i < recievers.length; i++) {\r\n            let info = this.generateCanvasData(i);\r\n            if (info) {\r\n                let data = (recievers[i]) ? <div key={'canvas'+i} className={info.className}>\r\n                    <Canvas\r\n                        rows={rows}\r\n                        columns={columns}\r\n                        blockSize={blockSize / 2}\r\n                        canvasFront={null}\r\n                        canvasBack={info.canvasBack}\r\n                        running={false}\r\n                        isPlayerReady={true}\r\n\r\n                    />\r\n                    <MiniCanvas\r\n                        canvasSide={null}\r\n                        showSide={false}\r\n                        rowScore={info.rowScore}\r\n                        totalScore={info.totalScore}\r\n                        columns={columns}\r\n                        blockSize={blockSize}\r\n                        name={recievers[i]}\r\n                    />\r\n                </div> : null;\r\n                canvases.push(data);\r\n            }\r\n        }\r\n        return canvases;\r\n    }\r\n\r\n\r\n    generateCanvasData = (index: number) => {\r\n        const { score, scorePlayer2, scorePlayer3, scorePlayer4, totalScore, totalScorePlayer2, totalScorePlayer3, totalScorePlayer4 } = this.state;\r\n        let data = null;\r\n        switch (index) {\r\n            case 0: data = {\r\n                className: 'canvas1',\r\n                rowScore: scorePlayer2,\r\n                totalScore: totalScorePlayer2,\r\n                canvasBack: this.canvasBack2\r\n            }; break;\r\n            case 1: data = {\r\n                className: 'canvas2',\r\n                rowScore: scorePlayer3,\r\n                totalScore: totalScorePlayer3,\r\n                canvasBack: this.canvasBack3\r\n            }; break;\r\n            case 2: data = {\r\n                className: 'canvas3',\r\n                rowScore: scorePlayer4,\r\n                totalScore: totalScorePlayer4,\r\n                canvasBack: this.canvasBack4\r\n            }; break;\r\n            case 3: data = {\r\n                className: 'canvas4',\r\n                rowScore: score,\r\n                totalScore: totalScore,\r\n                canvasBack: this.canvasBack\r\n            }; break;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    initGame = () => {\r\n        const { user, recievers, difficulty } = this.state;\r\n        CM.emitInitializeGame(user.name, recievers, difficulty);\r\n        this.setPlayerReady(true);\r\n    }\r\n\r\n    setPlayerReady = (tf: boolean) => {\r\n        this.setState({ isPlayerReady: tf })\r\n    }\r\n\r\n    singlePlayer = () => {\r\n        const shapesCoords = generateShapes(1000, this.state.difficulty);\r\n        const shapes = this.setGeneratedShapes(shapesCoords);\r\n        this.setState({\r\n            shapesCoords,\r\n            generatedShapes: shapes,\r\n            nextShape: shapes[0],\r\n            gameMode: 1,\r\n            isPlayerReady: true,\r\n\r\n        })\r\n        CM.emitInitializeGame(this.state.user.name, [], this.state.difficulty)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            isSpectator, columns,\r\n            rows, blockSize, score,\r\n            totalScore, user, recievers,\r\n            isPlayerReady, running,\r\n            reqAccepted, denied, gameMode, winner } = this.state;\r\n        const canvases = this.generateSpecCanvases();\r\n        return (\r\n            <div onKeyUp={this.onKeyUp} className='mainWrapper' >\r\n                <div>\r\n                    {gameMode == 2 || gameMode == 3 ?\r\n                        <div>\r\n\r\n                            <UserContainer\r\n                                setGeneratedShapes={this.setGeneratedShapes}\r\n                                reciever={recievers} startGame={this.startGame}\r\n                                user={user.name} logout={this.logout}\r\n                                setRecievers={this.setRecievers}\r\n                                isPlayerReady={isPlayerReady}\r\n                                changeSpectatingStatus={this.changeSpectatingStatus}\r\n                                running={running} reset={this.reset}\r\n                                addSpectator={this.addSpectator}\r\n                                initGame={this.initGame}\r\n                                denied={denied}\r\n                                isSpectator={isSpectator}\r\n                            />\r\n                           \r\n                                {!isPlayerReady && !isSpectator ?\r\n                                <div className=\"transparentCanvasBackground\">\r\n                                    <AutoComplete\r\n                                        rows={20}\r\n                                        columns={25}\r\n                                        blockSize={40}\r\n                                    /> \r\n                                    </div>: null}\r\n                                \r\n                            \r\n                        </div>\r\n                        : null}\r\n\r\n\r\n                    {(isPlayerReady) ? <div className={'main'}>\r\n                    <div className='mainCanvasWrapper'>\r\n                        <div className='wrap'>\r\n                            <Canvas\r\n                                rows={rows}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                canvasFront={this.canvasFront}\r\n                                canvasBack={this.canvasBack}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                        </div>\r\n                        <div className='sideWrap'>\r\n                            <MiniCanvas\r\n                                canvasSide={this.canvasSide}\r\n                                showSide={true}\r\n                                rowScore={score}\r\n                                totalScore={totalScore}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                name={user.name}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                            {gameMode == 1 ? <div>\r\n                                <button className=\"startBtn\" onClick={this.startGame}>Start</button>\r\n                            </div> : null}\r\n                        </div>\r\n                        </div>\r\n                        {canvases}\r\n                        {winner}\r\n                    </div> : null}\r\n                    {isSpectator ? <div className='main'> \r\n                        <br></br>\r\n                        {canvases}\r\n                    </div> : null}\r\n                </div>\r\n                {reqAccepted}\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UniversalShapeContext","import React from 'react'\r\n\r\nfunction Highscore(props: any) {\r\n\r\n    let scores: any[] = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        if (props.scores[i])\r\n            scores.push(<tr>\r\n                <td>{i+1}.</td>\r\n                <td>{props.scores[i].name}</td>\r\n                <td>{props.scores[i].score}</td>\r\n                <td>{props.scores[i].rows}</td>\r\n            </tr>)\r\n\r\n    }\r\n    return (\r\n        <div className=\"highscore\">\r\n        Highscores - {props.title}\r\n        <table>\r\n            <tbody>\r\n                \r\n                <tr>\r\n                    <td> </td>\r\n                    <td>Name</td>\r\n                    <td>Score</td>\r\n                    <td>Lines</td>\r\n                </tr>\r\n                {scores}\r\n            </tbody>\r\n        </table>-----------</div>\r\n    )\r\n}\r\n\r\nexport default Highscore","import React from 'react'\r\n\r\nfunction UserInfo(props: any) {\r\n    let show;\r\n    switch (props.gameMode) {\r\n        case 1: show = '- Game mode: Singleplayer'; break;\r\n        case 2: show = '- Game mode: Multiplayer'; break;\r\n        case 3: show = '- Game mode: Spectating'; break;\r\n        default: show = null; break;\r\n    }\r\n    \r\n    return (\r\n        <div className={\"userInfo\"}>\r\n            <div className='usernameDisplay'>\r\n                User: {props.user} {show}\r\n            </div>\r\n            <div className='buttonDisplay'>\r\n                <button className=\"resetBtn\" onClick={props.setDisplay} value={0}>Menu</button>\r\n                <form method='post' action='/logout'>\r\n\t\t\t\t<button>Logout</button>\r\n\t\t\t    </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo\r\n\r\n//{props.reciever.length > 0 && props.isPlayerReady ? 'Users in game: ' + props.displayRecievers : null}","import React from 'react';\r\nimport UniversalShapeContext from './UniversalShapeContext';\r\nimport Highscore from './Highscore';\r\nimport CM from './ClientManager';\r\nimport AutoComplete from './AutoComplete';\r\nimport UserInfo from './UserInfo';\r\nimport {TimelineMax} from 'gsap';\r\n\r\nclass Menu extends React.Component<{}, { user: any, width: number, display: number; difficulty: number; highscore: any[], highscoreEasy: any[] }> {\r\n    \r\n    buttons = document.getElementsByClassName('menuButton');\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            display: 0,\r\n            difficulty: 7,\r\n            highscore: [],\r\n            highscoreEasy: [],\r\n            width: window.innerWidth\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        CM.initMenu(this.setHighscore); \r\n        CM.emitVerifyUser('', '', this.setUser);\r\n        this.setState({width: window.innerWidth})\r\n        // change MySQL connetion first\r\n               \r\n    }\r\n\r\n    setUserDetails = (user: any) => {\r\n        CM.emitUserConnected(user);\r\n        this.setState({ user })\r\n    }\r\n\r\n    setUser = ({ user, isUser }: any) => {\r\n        if (isUser == 0) {\r\n           // this.setError('User is already logged in!');\r\n        }\r\n        else if (isUser == 1) {\r\n          //  this.setError('Incorrect username or password!');\r\n        }\r\n        else if(isUser == 2){\r\n            this.setUserDetails(user);\r\n          //  this.setError('');\r\n        }\r\n    }\r\n\r\n    animate = () => {\r\n        let tm = new TimelineMax();\r\n        tm.fromTo(this.buttons, 1 , {opacity: 0}, { opacity: '1'}, '-=0.2');\r\n    }\r\n    setDisplay = (event: any) => {\r\n        const value = event.target.value * 1\r\n        if (value == 2 || value == 3) {\r\n            CM.emitMultiplayer(this.state.user.name)\r\n        }\r\n        this.setState({\r\n            display: event.target.value * 1\r\n        })\r\n        \r\n    }\r\n\r\n    setHighscore = (highscore: any) => {\r\n        highscore.mode == 'normal' ? this.setState({ highscore: highscore.result }) : this.setState({ highscoreEasy: highscore.result });\r\n        \r\n    }\r\n\r\n    setDifficulty = (event: any) => {\r\n        this.setState({\r\n            difficulty: event.target.value * 1,\r\n            display: 0\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        CM.emitLogout();\r\n    }\r\n\r\n    render() {\r\n        const { user, display, difficulty, highscore, highscoreEasy, width } = this.state;\r\n        let show = <div></div>;\r\n        switch (display) {\r\n            case 0:\r\n                show =\r\n                    \r\n                        <div className=\"leftMenu\">\r\n                            <p className='title2'>TETRIS</p>\r\n\r\n                            <div className=\"menuButtons\">\r\n\r\n                                <p>Menu</p>\r\n                                <button className=\"menuButton\" onClick={this.setDisplay} value={1}>SINGLEPLAYER</button>\r\n                                <button className=\"menuButton\" onClick={this.setDisplay} value={2}>MULTIPLAYER</button>\r\n                                <button className=\"menuButton\" onClick={this.setDisplay} value={3}>SPECTATE</button>\r\n                                <button className=\"menuButton\" onClick={this.setDisplay} value={4}>SETTINGS</button>\r\n                                <button className=\"menuButton\" onClick={this.setDisplay} value={5}>HIGHSCORES</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ; break;\r\n            case 1:\r\n                show = <UniversalShapeContext setDisplay={this.setDisplay} difficulty={difficulty} user={user} mode={display} />;\r\n                \r\n                    ; break;\r\n            case 2:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 3:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 4:\r\n                show =\r\n                    <div className=\"leftMenu\">\r\n                        <p className='title2'>TETRIS</p>\r\n                        <div className=\"menuButtons\">\r\n                            <p>Select difficulty</p>\r\n                            <button onClick={this.setDifficulty} value={7}>NORMAL</button>\r\n                            <button onClick={this.setDifficulty} value={10}>EASY</button>\r\n                            <button onClick={this.setDisplay} value={0}>Back</button>\r\n                        </div>\r\n                    </div>\r\n                    ; break;\r\n            case 5:\r\n                show = <div className=\"leftMenu\"><div className=\"highscoreWrapper\">\r\n\r\n                    {highscore != [] ? <Highscore scores={highscore} title={\"Normal\"} /> : null}\r\n                    {highscoreEasy != [] ? <Highscore scores={highscoreEasy} title={\"Easy\"} /> : null}\r\n                    <button onClick={this.setDisplay} value={0}>Back</button>\r\n                </div>\r\n                </div>; break;\r\n        }\r\n\r\n\r\n        return (\r\n            <div className='mainWrapper'>\r\n                {user ? <UserInfo user={user.name} logout={this.logout} setDisplay={this.setDisplay} gameMode={display} /> : null }\r\n                <div className='menuWrapper'>\r\n                    {show}\r\n                    {display == 0 || display == 4 || display == 5 ?\r\n                        <AutoComplete\r\n                            rows={20}\r\n                            columns={20}\r\n                            blockSize={Math.round(width / 2 / 22)}\r\n                        /> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport './App.css';\nimport Menu from './Menu';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Menu />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}